{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGift","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAehD,OACE,8BACE,sBAAMC,SAVW,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAAyBO,OACvCN,EAAc,MAKd,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAflB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,e,+BCNdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACkCC,UAAUH,GAD5C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATlB,kBAaZM,GAbY,4CAAH,sDCCPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OADAc,QAAQC,IAAIf,GAER,sBAAKgB,UAAU,2CAAf,UACG,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCHFS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNe,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACR1B,EAAQC,GAAU0B,MAAK,SAACC,GACtBH,EAAS,CACPjB,KAAMoB,EACNL,SAAS,SAGZ,CAACtB,IAEGuB,EDb2BK,CAAa5B,GAAjCa,EADyB,EAC/BN,KAAce,EADiB,EACjBA,QAEtB,OACE,qCACE,6BAAKtB,IACJsB,GAAW,mBAAGJ,UAAU,sCAAb,qBACZ,qBAAKA,UAAU,YAAf,SACGL,EAAOJ,KAAI,SAACoB,GACX,OAAO,cAAC,EAAD,eAAgCA,GAAdA,EAAMlB,aEoB1BmB,EA9BM,WAAM,MAGW5C,mBAAS,CAAC,cAHrB,mBAGlB6C,EAHkB,KAGN9C,EAHM,KAYzB,OACE,gCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG8C,EAAWtB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAEAA,SAAYA,GADPA,Y,MClBfgC,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.06e5ef03.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 0) {\n      setCategories((cats) => [inputValue,...cats]); //callback me trae el ultimo estado\n      setInputValue(\"\");\n    }\n  };\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n      </form>\n    </div>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","\nexport const getGift = async (category) => {\n    const url =`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=vKcdVS8MNNbTY3xnp03nyprRznMRN0AJ`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map((img) => {\n      return {\n        id: img.id,\n        title: img.title,\n        url: img.images.downsized_medium.url,\n      };\n    });\n\n    return gifs;\n  };","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n    console.log(url)\n    return (\n        <div className=\"card animate__animated animate__bounceIn\" >\n           <img src={url} alt={title}></img>\n           <p>{title}</p>\n        </div>\n    )\n}\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category); //aca trabajo con el custom hook\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && <p className=\"animate__animated animate__bounceIn\">Loading</p>}\n      <div className=\"card-grid\">\n        {images.map((image) => {\n          return <GifGridItem key={image.id} {...image} />;\n        })}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getGift } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGift(category).then((imgs) => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state;\n};\n","import { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\nconst GifExpertApp = () => {\n  //const categories = ['One Punch', 'Samurai', 'Dargon Ball']\n\n  const [categories, setCategories] = useState([\"One Punch\"]);\n\n  // const handleAdd = () =>{\n  // let anime = 'Naruto';\n  //     setCategories([...categories, anime]);//agregar de ultimo\n  //     //setCategories([anime,...categories])//agregar de primero\n  //     //setCategories(cats => [...categories,anime]); //callback\n  // }\n\n  return (\n    <div>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map((category) => (\n          <GifGrid\n          key={category}\n          category = {category}/>\n        )\n        )}\n      </ol>\n    </div>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n\n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}